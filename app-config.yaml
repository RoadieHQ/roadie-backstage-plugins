app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  baseUrl: http://localhost:7007

  listen:
    port: 7007
  csp:
    connect-src: ["'self'", 'http:', 'https:']
  cors:
    origin: http://localhost:3000
    methods: [GET, POST, PUT, DELETE]
    credentials: true
  database:
    client: better-sqlite3
    connection: ':memory:'
  cache:
    store: memory
  auth:
    keys:
      - secret: foo
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}
bitbucket:
  proxyPath: /bitbucket/api

proxy:
  '/test':
    target: 'https://example.com'
    changeOrigin: true

  '/cloudsmith':
    target: 'https://api.cloudsmith.io/v1'
    headers:
      X-Api-Key: ${CLOUDSMITH_API_KEY}
      user-agent: 'Roadie-Backstage'

  '/aws-news-feed':
    target: 'https://aws.amazon.com/about-aws/whats-new/recent/feed/'

  '/reuters-news-feed':
    target: 'https://www.reutersagency.com/feed'

  '/jira/api':
    target: 'https://roadie-dev.atlassian.net'
    headers:
      Authorization: ${JIRA_TOKEN}
      Accept: 'application/json'
      Content-Type: 'application/json'
      X-Atlassian-Token: 'no-check'
      User-Agent: 'Roadie-Backstage'

  '/bitbucket/api':
    target: https://bitbucket.org
    changeOrigin: true
    headers:
      Authorization: Bearer ${BITBUCKET_TOKEN}
      Accept: 'application/json'
      Content-Type: 'application/json'

  '/travisci/api':
    target: https://api.travis-ci.com
    changeOrigin: true
    headers:
      Authorization: 'token ${TRAVISCI_AUTH_TOKEN}'
      travis-api-version: '3'

  '/buildkite/api':
    target: https://api.buildkite.com/v2/
    headers:
      Authorization: 'Bearer ${BUILDKITE_API_TOKEN}'

  '/argocd/api':
    # url to the api of your hosted argoCD instance
    target: https://localhost:8080/api/v1/
    changeOrigin: true
    # this line is required if your hosted argoCD instance has self-signed certificate
    secure: false
    headers:
      Cookie: ${ARGOCD_AUTH_TOKEN}

  '/prometheus/api':
    # url to the api of your hosted prometheus instance
    target: http://localhost:9090/api/v1/
    changeOrigin: true
    secure: false

  '/bugsnag/api':
    target: 'https://api.bugsnag.com'
    headers:
      Authorization: 'token ${BUGSNAG_PERSONAL_TOKEN}'
      X-version: '2'

  '/shortcut/api':
    target: https://api.app.shortcut.com/api/v3
    headers:
      Shortcut-Token: '${SHORTCUT_API_TOKEN}'

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generators:
    techdocs: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers: {}
scaffolder:
  github:
    token: ${GITHUB_TOKEN}
    visibility: public # or 'internal' or 'private'

catalog:
  rules:
    - allow: [Component, System, API, Group, User, Resource, Location, Template]
  locations:
    # File used for testing purposes
    - type: file
      target: ../entities/test-entity.yaml

    - type: file
      target: ../entities/test-template.yaml
      rules:
        - allow: [Template]
    # Roadie example AWS ECR repo creation
    - type: file
      target: ../entities/ecr-repo-create-template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ../entities/http-request-proxy-debug.yaml
      rules:
        - allow: [Template]
    # Backstage example components
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-components.yaml

    # Backstage example systems
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-systems.yaml

    # Backstage example APIs
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-apis.yaml

    # Backstage example resources
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-resources.yaml

    # Backstage example organization groups
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme/org.yaml

    - type: url
      target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/remote-templates.yaml
      rules:
        - allow: [Template]

    # Backstage example templates
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/react-ssr-template/template.yaml
    #   rules:
    #     - allow: [Template]
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/springboot-grpc-template/template.yaml
    #   rules:
    #     - allow: [Template]
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/create-react-app/template.yaml
    #   rules:
    #     - allow: [Template]
    # - type: url
    #   target: https://github.com/spotify/cookiecutter-golang/blob/master/template.yaml
    #   rules:
    #     - allow: [Template]
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/docs-template/template.yaml
    #   rules:
    #     - allow: [Template]
argocd:
  baseUrl: https://localhost:8080
  username: ${ARGOCD_USERNAME}
  password: ${ARGOCD_PASSWORD}
  projectSettings:
    #    Sets the allowed resources at the cluster level
    #    clusterResourceWhitelist:
    #      - group: '*'
    #        kind: '*'
    #    Sets the blocked resources at the cluster level
    clusterResourceBlacklist:
      - group: '*'
        kind: '*'
    #    Sets the allowed resources at the namespace level
    namespaceResourceWhitelist:
      - group: '*'
        kind: '*'
  #    Sets the blocked resources at the namespace level
  #    namespaceResourceBlacklist:
  #      - group: '*'
  #        kind: 'Deployment'
  appLocatorMethods:
    []
    ## The below is if you wish to scan all Argo CD instances, however
    ## you must also configure the `backstage-plugin-argo-cd-backend`
    ## plugin to use the below. Please see the README.md for plugin
    ## `backstage-plugin-argo-cd-backend`.
    # - type: 'config'
    #   instances:
    #     - name: argoInstance2
    #       url: https://argoInstance2.com

prometheus:
  proxyPath: /prometheus/api
  uiUrl: http://localhost:9090

bugsnag:
  resultsPerPage: 50

iframe:
  allowList: ['example.com']
