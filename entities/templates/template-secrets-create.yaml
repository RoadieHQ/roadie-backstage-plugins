apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: aws-secrets-manager-demo
  title: AWS Secrets Manager Create Demo
  description: Demonstrates the roadiehq:aws:secrets-manager:create action
  tags:
    - demo
    - aws
    - secrets-manager
    - security
spec:
  owner: platform-team
  type: demo

  parameters:
    - title: AWS Configuration
      required:
        - region
        - secretType
      properties:
        region:
          title: AWS Region
          type: string
          description: AWS region to create the secret in
          enum:
            - us-east-1
            - us-west-2
            - eu-west-1
            - eu-central-1
            - ap-southeast-1
          default: us-east-1
        secretType:
          title: Secret Type
          type: string
          description: Choose the type of secret to create
          enum:
            - database-credentials
            - api-keys
            - ssl-certificates
            - custom-config
          enumNames:
            - 'Database Credentials'
            - 'API Keys'
            - 'SSL Certificates'
            - 'Custom Configuration'
          default: database-credentials
        environment:
          title: Environment
          type: string
          description: Environment for the secret
          enum:
            - development
            - staging
            - production
          default: development

  steps:
    - id: generate-database-secret
      name: Generate Database Credentials
      if: ${{ parameters.secretType === 'database-credentials' }}
      action: roadiehq:utils:serialize:json
      input:
        data:
          username: 'app_user'
          password: 'generated_password_123'
          host: 'db-${{ parameters.environment }}.example.com'
          port: 5432
          database: 'app_db_${{ parameters.environment }}'
          connection_string: 'postgresql://app_user:generated_password_123@db-${{ parameters.environment }}.example.com:5432/app_db_${{ parameters.environment }}'

    - id: create-database-secret
      name: Create Database Secret
      if: ${{ parameters.secretType === 'database-credentials' }}
      action: roadiehq:aws:secrets-manager:create
      input:
        name: 'demo-app/database/${{ parameters.environment }}'
        description: 'Database credentials for demo application (${{ parameters.environment }})'
        value: ${{ steps['generate-database-secret'].output.serialized }}
        region: ${{ parameters.region }}
        tags:
          - Key: 'Environment'
            Value: ${{ parameters.environment }}
          - Key: 'Application'
            Value: 'demo-app'
          - Key: 'SecretType'
            Value: 'database'

    - id: generate-api-keys
      name: Generate API Keys
      if: ${{ parameters.secretType === 'api-keys' }}
      action: roadiehq:utils:serialize:json
      input:
        data:
          stripe_api_key: 'sk_test_abcd1234567890'
          sendgrid_api_key: 'SG.xyz789.abc123'
          github_token: 'ghp_abcdefghijklmnop'
          jwt_secret: 'super_secret_jwt_key_${{ parameters.environment }}'

    - id: create-api-keys-secret
      name: Create API Keys Secret
      if: ${{ parameters.secretType === 'api-keys' }}
      action: roadiehq:aws:secrets-manager:create
      input:
        name: 'demo-app/api-keys/${{ parameters.environment }}'
        description: 'Third-party API keys for demo application (${{ parameters.environment }})'
        value: ${{ steps['generate-api-keys'].output.serialized }}
        region: ${{ parameters.region }}
        tags:
          - Key: 'Environment'
            Value: ${{ parameters.environment }}
          - Key: 'Application'
            Value: 'demo-app'
          - Key: 'SecretType'
            Value: 'api-keys'

    - id: generate-ssl-cert
      name: Generate SSL Certificate
      if: ${{ parameters.secretType === 'ssl-certificates' }}
      action: roadiehq:utils:serialize:json
      input:
        data:
          certificate: "-----BEGIN CERTIFICATE-----\nMIIDXTCCAkWgAwIBAgIJAKoK/heBjcOuMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\n...\n-----END CERTIFICATE-----"
          private_key: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDGtJTRRJ8Kx7ZG\n...\n-----END PRIVATE KEY-----"
          ca_certificate: "-----BEGIN CERTIFICATE-----\nMIIDXTCCAkWgAwIBAgIJAKoK/heBjcOuMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\n...\n-----END CERTIFICATE-----"
          passphrase: 'ssl_cert_passphrase_${{ parameters.environment }}'

    - id: create-ssl-secret
      name: Create SSL Certificate Secret
      if: ${{ parameters.secretType === 'ssl-certificates' }}
      action: roadiehq:aws:secrets-manager:create
      input:
        name: 'demo-app/ssl-cert/${{ parameters.environment }}'
        description: 'SSL certificates for demo application (${{ parameters.environment }})'
        value: ${{ steps['generate-ssl-cert'].output.serialized }}
        region: ${{ parameters.region }}
        tags:
          - Key: 'Environment'
            Value: ${{ parameters.environment }}
          - Key: 'Application'
            Value: 'demo-app'
          - Key: 'SecretType'
            Value: 'ssl-certificates'

    - id: generate-custom-config
      name: Generate Custom Configuration
      if: ${{ parameters.secretType === 'custom-config' }}
      action: roadiehq:utils:serialize:json
      input:
        data:
          encryption_key: 'custom_encryption_key_${{ parameters.environment }}'
          session_secret: 'session_secret_key_123'
          oauth_client_id: 'oauth_client_${{ parameters.environment }}'
          oauth_client_secret: 'oauth_secret_${{ parameters.environment }}'
          redis_password: 'redis_password_123'
          feature_flags:
            new_ui: true
            beta_features: ${{ parameters.environment === 'development' }}

    - id: create-custom-secret
      name: Create Custom Configuration Secret
      if: ${{ parameters.secretType === 'custom-config' }}
      action: roadiehq:aws:secrets-manager:create
      input:
        name: 'demo-app/config/${{ parameters.environment }}'
        description: 'Custom configuration secrets for demo application (${{ parameters.environment }})'
        value: ${{ steps['generate-custom-config'].output.serialized }}
        region: ${{ parameters.region }}
        tags:
          - Key: 'Environment'
            Value: ${{ parameters.environment }}
          - Key: 'Application'
            Value: 'demo-app'
          - Key: 'SecretType'
            Value: 'configuration'

    - id: create-usage-guide
      name: Create Usage Guide
      action: roadiehq:utils:fs:write
      input:
        path: secrets-usage-guide.md
        content: |
          # AWS Secrets Manager Usage Guide

          ## Secret Created
          - **Type:** ${{ parameters.secretType }}
          - **Environment:** ${{ parameters.environment }}
          - **Region:** ${{ parameters.region }}
          - **Name:** demo-app/${{ parameters.secretType === 'database-credentials' && 'database' || parameters.secretType === 'api-keys' && 'api-keys' || parameters.secretType === 'ssl-certificates' && 'ssl-cert' || 'config' }}/${{ parameters.environment }}

          ## AWS CLI Usage

          ### Retrieve the secret
          ```bash
          aws secretsmanager get-secret-value \
            --secret-id "demo-app/${{ parameters.secretType === 'database-credentials' && 'database' || parameters.secretType === 'api-keys' && 'api-keys' || parameters.secretType === 'ssl-certificates' && 'ssl-cert' || 'config' }}/${{ parameters.environment }}" \
            --region ${{ parameters.region }}
          ```

          ### Update the secret
          ```bash
          aws secretsmanager update-secret \
            --secret-id "demo-app/${{ parameters.secretType === 'database-credentials' && 'database' || parameters.secretType === 'api-keys' && 'api-keys' || parameters.secretType === 'ssl-certificates' && 'ssl-cert' || 'config' }}/${{ parameters.environment }}" \
            --secret-string '{"key":"value"}' \
            --region ${{ parameters.region }}
          ```

          ## Application Usage

          ### Node.js Example
          ```javascript
          const AWS = require('aws-sdk');
          const secretsManager = new AWS.SecretsManager({ region: '${{ parameters.region }}' });

          async function getSecret() {
            const result = await secretsManager.getSecretValue({
              SecretId: 'demo-app/${{ parameters.secretType === 'database-credentials' && 'database' || parameters.secretType === 'api-keys' && 'api-keys' || parameters.secretType === 'ssl-certificates' && 'ssl-cert' || 'config' }}/${{ parameters.environment }}'
            }).promise();
            
            return JSON.parse(result.SecretString);
          }
          ```

          ### Python Example
          ```python
          import boto3
          import json

          def get_secret():
              session = boto3.session.Session()
              client = session.client('secretsmanager', region_name='${{ parameters.region }}')
              
              response = client.get_secret_value(
                  SecretId='demo-app/${{ parameters.secretType === 'database-credentials' && 'database' || parameters.secretType === 'api-keys' && 'api-keys' || parameters.secretType === 'ssl-certificates' && 'ssl-cert' || 'config' }}/${{ parameters.environment }}'
              )
              
              return json.loads(response['SecretString'])
          ```

          ## Best Practices

          1. **Rotation:** Enable automatic rotation for database credentials
          2. **Access Control:** Use IAM policies to restrict secret access
          3. **Monitoring:** Enable CloudTrail logging for secret access
          4. **Tagging:** Use consistent tagging for organization
          5. **Encryption:** Secrets are encrypted at rest by default

  output:
    text:
      - title: Secret Created Successfully
        content: |
          Successfully created **${{ parameters.secretType }}** secret in AWS Secrets Manager!

          **Secret Name:** `demo-app/${{ parameters.secretType === 'database-credentials' && 'database' || parameters.secretType === 'api-keys' && 'api-keys' || parameters.secretType === 'ssl-certificates' && 'ssl-cert' || 'config' }}/${{ parameters.environment }}`
          **Region:** `${{ parameters.region }}`
          **Environment:** `${{ parameters.environment }}`

          Features demonstrated:
          - Secret creation with structured JSON content
          - Environment-specific secret naming
          - Comprehensive tagging strategy
          - Multiple secret types (DB, API keys, SSL, config)
          - Regional secret storage

          See `secrets-usage-guide.md` for usage examples and best practices.
